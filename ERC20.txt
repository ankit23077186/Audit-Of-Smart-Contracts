// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract ERC20 {
    /// @notice Event emitted when a transfer of tokens occurs
    /// @param from The address from which the tokens are transferred
    /// @param to The address to which the tokens are transferred
    /// @param value The amount of tokens transferred
    event Transfer(address indexed from, address indexed to, uint256 value);

    /// @notice Event emitted when an approval is made
    /// @param owner The address of the token owner
    /// @param spender The address approved to spend tokens
    /// @param value The amount of tokens approved for spending
    event Approval(address indexed owner, address indexed spender, uint256 value);

    using SafeMath for uint256;

    /// @notice Mapping of token balances for each address
    mapping(address => uint256) private _balances;

    /// @notice Mapping of allowances where one address is allowed to spend tokens on behalf of another
    mapping(address => mapping(address => uint256)) private _allowed;

    /// @notice Total supply of tokens
    uint256 private _totalSupply;

    /**
     * @notice Constructor to initialize the total supply of tokens
     * @param totalSupply The total number of tokens to be created
     * @return None
     */
    constructor(uint256 totalSupply) {
        _balances[msg.sender] = totalSupply;
    }

    /**
     * @notice Get the balance of tokens for a given address
     * @param owner The address whose balance is being queried
     * @return The balance of tokens for the given address
     */
    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }

    /**
     * @notice Get the allowance of tokens that a spender is approved to spend on behalf of an owner
     * @param owner The address of the token owner
     * @param spender The address approved to spend tokens
     * @return The amount of tokens approved for spending
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowed[owner][spender];
    }

    /**
     * @notice Transfer tokens from the caller's address to another address
     * @dev Requires that the caller has sufficient balance and the recipient address is not zero.
     * @param to The address to transfer tokens to
     * @param value The amount of tokens to transfer
     * @return A boolean value indicating whether the operation succeeded
     */
    function transfer(address to, uint256 value) public returns (bool) {
        require(value <= _balances[msg.sender], "Insufficient balance");
        require(to != address(0), "Invalid address");

        _balances[msg.sender] = _balances[msg.sender].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(msg.sender, to, value);
        return true;
    }

    /**
     * @notice Approve a spender to spend a specific amount of tokens on behalf of the caller
     * @dev This function is vulnerable to front-running attacks, where an attacker could exploit the 
     * time between approval and actual transfer to drain the caller's balance.
     * @param spender The address approved to spend tokens
     * @param value The amount of tokens approved for spending
     * @return A boolean value indicating whether the operation succeeded
     */
    function approve(address spender, uint256 value) public returns (bool) {
        require(spender != address(0), "Invalid address");

        _allowed[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    /**
     * @notice Transfer tokens from one address to another, using an allowance
     * @dev Requires that the sender has sufficient balance, the spender is allowed to spend 
     * the specified amount, and the recipient address is not zero.
     * @param from The address from which tokens are being transferred
     * @param to The address to transfer tokens to
     * @param value The amount of tokens to transfer
     * @return A boolean value indicating whether the operation succeeded
     */
    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(value <= _balances[from], "Insufficient balance");
        require(value <= _allowed[from][msg.sender], "Allowance exceeded");
        require(to != address(0), "Invalid address");

        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
        emit Transfer(from, to, value);
        return true;
    }
}
