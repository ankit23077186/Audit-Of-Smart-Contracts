/*
 * @source: http://blockchain.unica.it/projects/ethereum-survey/attacks.html#oddsandevens
 * @author: -
 * @vulnerable_at_lines: 25,28
 */

pragma solidity ^0.4.2;

contract OddsAndEvens {
    struct Player {
        address addr;
        uint number;
    }

    Player[2] public players; // public only for debug purpose

    uint8 tot;
    address owner;

    /// @notice Constructor to set the owner of the contract
    function OddsAndEvens() {
        owner = msg.sender;
    }

    /**
     * @notice Play the odds and evens game by sending 1 ether and choosing a number
     * @dev Vulnerable to front-running attacks where an attacker could observe
     * the game state and manipulate their play to their advantage before this 
     * transaction is mined.
     * @param number The number chosen by the player (0 or 1)
     * @return None
     */
    function play(uint number) payable {
        if (msg.value != 1 ether) throw;
        players[tot] = Player(msg.sender, number);
        tot++;

        if (tot == 2) andTheWinnerIs();
    }

    /**
     * @notice Determine the winner of the game and distribute the reward
     * @dev Transfers ether to the winner based on the sum of the chosen numbers.
     * This function is also vulnerable to front-running attacks where an attacker
     * could manipulate the state of the game before the results are finalized.
     * @return None
     */
    function andTheWinnerIs() private {
        bool res;
        uint n = players[0].number + players[1].number;
        if (n % 2 == 0) {
            res = players[0].addr.send(1800 finney);
        } else {
            res = players[1].addr.send(1800 finney);
        }

        delete players;
        tot = 0;
    }

    /**
     * @notice Allow the owner to withdraw the contract balance
     * @dev Only the owner can call this function to withdraw the contract balance.
     * @return None
     */
    function getProfit() {
        if (msg.sender != owner) throw;
        bool res = msg.sender.send(this.balance);
    }
}
