// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RefundCrowdfunding {
    /// @notice The funding goal for the campaign
    uint public goal;

    /// @notice The total amount of funds raised so far
    uint public raisedAmount;

    /// @notice Mapping of addresses to their respective contributions
    mapping(address => uint) public contributions;

    /**
     * @notice Contribute funds to the crowdfunding campaign
     * @dev Requires a non-zero contribution. The contribution amount is added 
     * to the sender's total contributions and the overall raised amount.
     * @param msg.value The amount of ether being contributed
     * @return None
     */
    function contribute() public payable {
        require(msg.value > 0, "Contribution must be greater than 0.");
        contributions[msg.sender] += msg.value;
        raisedAmount += msg.value;
    }

    /**
     * @notice Request a refund of contributed funds
     * @dev Allows contributors to withdraw their contributions if necessary. 
     * However, this function is vulnerable to reentrancy attacks, where an attacker 
     * can repeatedly call the refund function before the state is updated, potentially 
     * draining the contract's funds.
     * @return None
     */
    function refund() public {
        uint amount = contributions[msg.sender];
        require(amount > 0, "No contributions to refund.");
        contributions[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
    }
}
