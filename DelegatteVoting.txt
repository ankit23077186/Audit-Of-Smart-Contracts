// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DelegateVoting {
    struct Proposal {
        uint voteCount;
    }

    /// @notice Mapping from proposal ID to their vote count
    mapping(uint => Proposal) public proposals;

    /// @notice Mapping from voter address to their delegate address
    mapping(address => address) public delegate;

    /**
     * @notice Set a delegate address for the caller
     * @param _delegate The address to delegate votes to
     * @return None
     */
    function setDelegate(address _delegate) public {
        delegate[msg.sender] = _delegate;
    }

    /**
     * @notice Cast a vote for a specific proposal
     * @dev Vulnerable to front-running attacks where another transaction can 
     * front-run and set the delegate, potentially affecting the vote outcome.
     * @param proposalId The ID of the proposal to vote for
     * @return None
     */
    function vote(uint proposalId) public {
        address voter = delegate[msg.sender] == address(0) ? msg.sender : delegate[msg.sender];
        proposals[proposalId].voteCount++;
    }
}
