/*
 * @source: https://github.com/sigp/solidity-security-blog
 * @author: -
 * @vulnerable_at_lines: 17
 */

pragma solidity ^0.4.22;

contract FindThisHash {
    /// @notice The hash that needs to be solved
    bytes32 constant public hash = 0xb5b5b97fafd9855eec9b41f74dfb6c38f5951141f9a3ecd7f44d5479b630ee0a;

    /// @notice Constructor to initialize the contract with ether
    constructor() public payable {}

    /**
     * @notice Solve the hash challenge to claim the reward
     * @dev Vulnerable to front-running attacks where an attacker could submit a 
     * solution before this transaction is mined, thereby claiming the reward.
     * @param solution The solution string to check against the hash
     * @return None
     */
    function solve(string solution) public {
        require(hash == sha3(solution));
        msg.sender.transfer(1000 ether);
    }
}
