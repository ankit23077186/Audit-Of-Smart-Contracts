// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TimelockVoting {
    struct Proposal {
        uint voteCount;
        uint endTime;
    }

    /// @notice Mapping from proposal ID to proposal details
    mapping(uint => Proposal) public proposals;

    /**
     * @notice Create a new proposal with a specified duration
     * @param proposalId The ID of the proposal
     * @param duration The duration in seconds until the proposal voting ends
     * @return None
     */
    function createProposal(uint proposalId, uint duration) public {
        proposals[proposalId] = Proposal(0, block.timestamp + duration);
    }

    /**
     * @notice Cast a vote for a specific proposal
     * @dev Vulnerable to front-running attacks where an attacker could 
     * place a vote right before the end time, potentially skewing the results.
     * @param proposalId The ID of the proposal to vote for
     * @return None
     */
    function vote(uint proposalId) public {
        require(block.timestamp < proposals[proposalId].endTime, "Voting has ended.");
        proposals[proposalId].voteCount++;
    }
}
