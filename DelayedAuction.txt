// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DelayedAuction {
    /// @notice Address of the current highest bidder
    address public highestBidder;

    /// @notice Current highest bid amount
    uint public highestBid;

    /// @notice Mapping of addresses to pending returns due to being outbid
    mapping(address => uint) public pendingReturns;

    /**
     * @notice Place a bid in the auction
     * @dev The bid must be higher than the current highest bid. 
     * If the bid is successful, the previous highest bidder's funds 
     * are added to the pending returns, which they can later withdraw.
     * @dev The vulnerability is mitigated in this function, but it still 
     * allows front-running in the withdraw function.
     * @param msg.value The amount of the bid submitted by the bidder
     * @return None
     */
    function bid() public payable {
        require(msg.value > highestBid, "Bid not high enough.");
        if (highestBidder != address(0)) {
            pendingReturns[highestBidder] += highestBid;
        }
        highestBidder = msg.sender;
        highestBid = msg.value;
    }

    /**
     * @notice Withdraw funds for a previous bid
     * @dev This function allows bidders who have been outbid to withdraw 
     * their funds. However, it is vulnerable to reentrancy attacks, where an 
     * attacker can re-enter the function and drain funds by repeatedly calling 
     * withdraw before the state is updated.
     * @return None
     */
    function withdraw() public {
        uint amount = pendingReturns[msg.sender];
        require(amount > 0, "No funds to withdraw.");
        pendingReturns[msg.sender] = 0;
        payable(msg.sender).transfer(amount);
    }
}
