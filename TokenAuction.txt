// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TokenAuction {
    /// @notice Address of the current highest bidder
    address public highestBidder;

    /// @notice The amount of tokens for the highest bid
    uint public highestBid;

    /// @notice Total supply of tokens available for auction
    uint public tokenSupply;

    /// @notice Minimum increment for a valid bid
    uint public minBidIncrement;

    /**
     * @notice Set the minimum bid increment for the auction
     * @param _increment The minimum increment in tokens for the bid
     * @return None
     */
    function setMinBidIncrement(uint _increment) public {
        minBidIncrement = _increment;
    }

    /**
     * @notice Place a bid in the auction with a specified number of tokens
     * @dev Vulnerable to front-running attacks where another transaction can 
     * observe and exploit the bid increment before this one is mined.
     * @param tokens The number of tokens bid for the auction
     * @return None
     */
    function bid(uint tokens) public payable {
        require(tokens > highestBid + minBidIncrement, "Bid not high enough.");
        highestBidder = msg.sender;
        highestBid = tokens;
    }
}
